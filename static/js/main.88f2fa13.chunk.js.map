{"version":3,"sources":["grid.ts","generator.ts","GameInterface.tsx","CaptchaButton.tsx","Captcha.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Grid","w","h","rawData","list","width","height","this","a","b","value","fill","Array","g","addMine","board","x","Math","max","min","y","set","get","generateBoard","size","totalSquares","nums","i","array","length","index","lastIndex","result","rand","floor","random","shuffle","numMines","randInteger","numBlankSquares","j","InterfaceWrapper","styled","div","GridWrapper","numColumns","GridCellText","span","fontSize","colorIndex","theme","gameColors","GridCell","isSelected","primaryColor","SubmitButton","button","fontFamily","ErrorText","errorColor","RowFlex","MarginRight","GameInterface","selection","content","onSquareClick","onVerifyClick","isIncorrect","useState","shakeButton","setShakeButton","cells","console","log","cellNumber","onClick","useEffect","timeout","window","setTimeout","clearTimeout","useSpring","transform","config","friction","tension","style","_","correct","ButtonContainer","isDone","Text","MiddleSection","LeftSection","Checkbox","Image","Logo","img","src","alt","Tick","anim","from","strokeDashoffset","to","svg","viewBox","path","stroke","strokeWidth","strokeDasharray","d","CaptchaButton","e","CaptchaState","DialogWrapper","animated","DismissFrame","AbsDiv","FrameWrapper","HeaderWrapper","LargeHeaderText","HeaderText","Header","MainScreen","setSelection","newArray","Captcha","forwardRef","props","ref","setBoard","NOT_DONE","captchaState","setCaptchaState","setIncorrect","reset","obj","selected","proposedBoard","realCount","verifyAnswer","DONE","useImperativeHandle","showDialog","IN_PROGRESS","gridSize","items","mass","opacity","enter","leave","styles","show","App","inputValue","setInputValue","useRef","Container","maxWidth","Card","variant","CardContent","container","spacing","item","xs","Typography","component","gutterBottom","Link","href","id","Slider","valueLabelDisplay","step","onChange","newValue","marks","label","Button","color","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAAqBA,E,WAInB,WAAYC,EAAWC,EAAWC,GAAe,yBAHjDC,UAGgD,OAFhDC,WAEgD,OADhDC,YACgD,EAC9CC,KAAKH,KAAOD,EACZI,KAAKF,MAAQJ,EACbM,KAAKD,OAASJ,E,uCAQhB,SAAIM,EAAWC,GACb,OAAOF,KAAKH,KAAKI,EAAIC,EAAIF,KAAKF,S,iBAEhC,SAAIG,EAAWC,EAAWC,GACxBH,KAAKH,KAAKI,EAAIC,EAAIF,KAAKF,OAASK,I,qBAElC,WACE,OAAOH,KAAKH,Q,mBAbd,SAAeH,EAAWC,EAAWS,GACnC,OAAO,IAAIX,EAAKC,EAAGC,EAAG,IAAIU,MAAMX,EAAIC,GAAGS,KAAKA,M,kBAE9C,SAAeE,GACb,OAAO,IAAIb,EAAKa,EAAER,MAAOQ,EAAEP,OAAQO,EAAET,U,KCWzC,SAASU,EAAQC,EAAqBP,EAAWC,GAC/C,IAAK,IAAIO,EAAIC,KAAKC,IAAIV,EAAE,EAAG,GAAIQ,GAAKC,KAAKE,IAAIX,EAAE,EAAGO,EAAMV,MAAQ,GAAIW,IAClE,IAAK,IAAII,EAAIH,KAAKC,IAAIT,EAAE,EAAG,GAAIW,GAAKH,KAAKE,IAAIV,EAAE,EAAGM,EAAMT,OAAS,GAAIc,IACnEL,EAAMM,IAAIL,EAAGI,EAAGL,EAAMO,IAAIN,EAAGI,GAAK,GAiCjC,SAASG,EAAcC,GAG5B,IAFA,IAAMC,EAAeD,EAAOA,EACxBE,EAAO,IAAId,MAAMa,GACZE,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,EAAKC,GAAKA,EAEZD,EA/DF,SAAoBE,GAKlB,IAJA,IAAMC,EAASD,EAAMC,OACjBC,GAAS,EACPC,EAAYF,EAAS,EACrBG,EAAM,YAAOJ,KACVE,EAAQD,GAAQ,CACvB,IAAMI,EAAOH,EAAQb,KAAKiB,MAAMjB,KAAKkB,UAAYJ,EAAYD,EAAQ,IAC/DpB,EAAQsB,EAAOC,GACrBD,EAAOC,GAAQD,EAAOF,GACtBE,EAAOF,GAASpB,EAElB,OAAOsB,EAoDAI,CAAQV,GAIf,IAHA,IAAIW,EAlDN,SAAqB7B,EAAWC,GAC9B,OAAOQ,KAAKiB,OAAOzB,EAAID,GAAKS,KAAKkB,SAAW3B,GAiD7B8B,CAAYb,EAAe,EAAGA,EAAe,EAAI,GAE1DV,EAAQf,EAAKW,KAAKa,EAAMA,EAAM,GAC3BG,EAAI,EAAGA,EAAIU,EAAUV,IAAK,CACjC,IAAIX,EAAIU,EAAKC,GAGbb,EAAQC,EAFAC,EAAIQ,EACJP,KAAKiB,MAAMlB,EAAIQ,IAMzB,IADA,IAAIe,EAAkBd,EAAe,EAC5BE,EAAI,EAAGA,EAAIU,EAAWE,EAAiBZ,IAAK,CACnD,IAAIX,EAAIU,EAAKC,GACTnB,EAAIQ,EAAIQ,EACRf,EAAIQ,KAAKiB,MAAMlB,EAAIQ,GACvBT,EAAMM,IAAIb,EAAGC,EAAG,MAMlB,IAAK,IAAIkB,EAAI,EAAGA,EAAIH,EAAMG,IACxB,IAAK,IAAIa,EAAI,EAAGA,EAAIhB,EAAMgB,IAAK,CAEf,IADFzB,EAAMO,IAAIK,EAAGa,IAEvBzB,EAAMM,IAAIM,EAAGa,EAAG,MAKtB,OAAOzB,E,uCC7FH0B,EAAmBC,IAAOC,IAAV,uEAOhBC,EAAcF,IAAOC,IAAV,8JAFJ,SAAC,GAAD,SAAGE,cAqBVC,EAAeJ,IAAOK,KAAV,qGACL,qBAAGC,YAJC,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,MAAf,OACfD,EAAa,EAAIC,EAAMC,WAAW,GAAKD,EAAMC,WAAWF,MAcpDG,EAAWV,IAAOC,IAAV,0OAQZ,gBAAGU,EAAH,EAAGA,WAAYH,EAAf,EAAeA,MAAf,OACAG,EACE,qBAAuBH,EAAMI,aAC7B,qCAQEC,EAAeb,IAAOc,OAAV,iOACE,qBAAEN,MAAiBI,gBAIxB,qBAAEJ,MAAiBO,cAS5BC,EAAYhB,IAAOK,KAAV,2DAEN,qBAAEG,MAAiBS,cAGtBC,EAAUlB,IAAOC,IAAV,wFAMPkB,EAAcnB,IAAOC,IAAV,iDAYF,SAASmB,EAAT,GAEZ,IADCC,EACF,EADEA,UAAWC,EACb,EADaA,QAASC,EACtB,EADsBA,cAAeC,EACrC,EADqCA,cAAeC,EACpD,EADoDA,YACpD,EACsCC,oBAAS,GAD/C,mBACOC,EADP,KACoBC,EADpB,KAEMjE,EAAQ0D,EAAU1D,MAClBC,EAASyD,EAAUzD,OACnBiE,EAAQ,IAAI3D,MAAMP,EAAQC,GAChCkE,QAAQC,IAAIpE,GACZ,IANA,eAMSsB,GACP,IAPF,eAOWa,GACP,IAAMkC,EAAaV,EAAQ1C,IAAIK,EAAGa,GAClC+B,EAAM5C,EAAIa,EAAInC,GACZ,cAAC+C,EAAD,CACEuB,QAAS,kBAAMV,EAActC,EAAGa,IAChCa,WAAYU,EAAUzC,IAAIK,EAAGa,GAF/B,SAGmB,OAAfkC,GACA,cAAC5B,EAAD,CACEE,SAAU/B,KAAKiB,MAAM,IAAM7B,GAC3B4C,WAAYyB,EAFd,SAGIV,EAAQ1C,IAAIK,EAAGa,MAPvB,UAAkBb,EAAlB,YAAuBa,KAHlBA,EAAI,EAAGA,EAAIlC,EAAQkC,IAAM,EAAzBA,IADFb,EAAI,EAAGA,EAAItB,EAAOsB,IAAM,EAAxBA,GAmBTiD,qBAAU,WACR,GAAIP,EAAa,CACf,IAAMQ,EAAUC,OAAOC,YAAW,kBAAMT,GAAe,KAAQ,IAC/D,OAAO,kBAAMQ,OAAOE,aAAaH,OAElC,CAACR,IAEJ,IAAMrD,EAAIiE,oBAAU,CAClBC,UAAU,eAAD,OAAiBb,EAAc,GAAK,EAApC,iBACTc,OAAQ,CACNC,SAAU,GACVC,QAAS,OAIb,OACA,eAAC5C,EAAD,WACE,cAACG,EAAD,CAAaC,WAAYxC,EAAzB,SACEkE,IAEF,eAACX,EAAD,WACE,cAACC,EAAD,UACE,cAAC,WAASlB,IAAV,CAAc2C,MAAOtE,EAArB,SACE,cAACuC,EAAD,CAAcoB,QAAS,SAACY,GACtB,IAAIC,EAAUtB,IACdI,GAAgBkB,IAFlB,wBAQFrB,GAAe,cAACT,EAAD,qCC1JvB,I,cAAM+B,EAAkB/C,IAAOC,IAAV,wNAUnB,qBAAG+C,QACH,2EAOIC,EAAOjD,IAAOK,KAAV,gEACK,qBAAEG,MAAiBO,cAI5BmC,EAAgBlD,IAAOC,IAAV,sCAIbkD,EAAcnD,IAAOC,IAAV,+EAMXmD,EAAWpD,IAAOC,IAAV,sIAad,SAASoD,IACP,IAAMC,EAAOtD,IAAOuD,IAAV,mEAIV,OACE,cAACD,EAAD,CAAME,IAAI,sBAAsBC,IAAI,qBAIxC,SAASC,KACP,IAAIC,EAAOpB,oBAAU,CACnBqB,KAAM,CAAEC,iBAAkB,IAC1BC,GAAI,CAAED,iBAAkB,KAE1B,OACE,cAAC,WAASE,IAAV,CACGpG,MAAM,KACNC,OAAO,KACPoG,QAAQ,0BAHX,SAKE,cAAC,WAASC,KAAV,CACErB,MAAOe,EACP1F,KAAK,eACLiG,OAAO,UACPC,YAAa,EACbC,gBAAiB,GACjBC,EAAE,iEAMK,SAASC,GAAT,GAAoD,IAA3BtB,EAA0B,EAA1BA,OAAQf,EAAkB,EAAlBA,QAC9C,OACE,eAACc,EAAD,CAAiBC,OAAQA,EAAQf,QAAS,SAACsC,GAAD,OAAQvB,GAAUf,KAA5D,UACE,cAACkB,EAAD,UACEH,EACA,cAACU,GAAD,IAEA,cAACN,EAAD,MAGF,cAACF,EAAD,UACE,cAACD,EAAD,6BAIF,cAACI,EAAD,OCzFN,IA0FKmB,GA1FChE,GAAQ,CACZI,aAAc,UACdK,WAAY,UACZF,WAAY,6BACZN,WAAY,CAAC,UAAW,UAAW,UAAW,YAG1CgE,GAAgBzE,YAAO0E,WAASzE,IAAhBD,CAAH,oHAQb2E,GAAe3E,IAAOC,IAAV,yGASZ2E,GAAS5E,IAAOC,IAAV,wEAMN4E,GAAe7E,IAAOC,IAAV,0GAEH,qBAAEO,MAAiBO,cAI5B+D,GAAgB9E,IAAOC,IAAV,oEACC,qBAAEO,MAAiBI,gBAIjCmE,GAAkB/E,IAAOC,IAAV,mFAMf+E,GAAahF,IAAOC,IAAV,6CAIVgF,GAAS,kBACb,eAACH,GAAD,WACE,cAACE,GAAD,sCACA,cAACD,GAAD,wBAUJ,SAASG,GAAT,GAA6E,IAAvDzD,EAAsD,EAAtDA,YAAapD,EAAyC,EAAzCA,MAAOmD,EAAkC,EAAlCA,cAAkC,EACxCE,mBAChCpE,EAAKW,KAAKI,EAAMV,MAAOU,EAAMT,QAAQ,IAFmC,mBACnEyD,EADmE,KACxD8D,EADwD,KAI1EjD,qBAAU,WACRiD,EAAa7H,EAAKW,KAAKI,EAAMV,MAAOU,EAAMT,QAAQ,MACjD,CAACS,IAMJ,OACE,eAACwG,GAAD,WACE,cAAC,GAAD,IACA,cAACzD,EAAD,CACEC,UAAWA,EACXC,QAASjD,EACTkD,cAXgB,SAACjD,EAAWI,GAChC,IAAM0G,EAAW9H,EAAKsG,KAAKvC,GAC3B+D,EAASzG,IAAIL,EAAGI,GAAI0G,EAASxG,IAAIN,EAAGI,IACpCyG,EAAaC,IAST3D,YAAaA,EACbD,cAAe,kBAAMA,EAAcH,U,SAMtCmD,O,uBAAAA,I,6BAAAA,I,gBAAAA,Q,KAcE,IAAMa,GAAUC,sBAAwC,SAACC,EAAOC,GAAS,IAAD,EACnD9D,mBAA8B,MADqB,mBACtErD,EADsE,KAC/DoH,EAD+D,OAErC/D,mBAAS8C,GAAakB,UAFe,mBAEtEC,EAFsE,KAExDC,EAFwD,OAGzClE,oBAAS,GAHgC,mBAGtED,EAHsE,KAGzDoE,EAHyD,KAWvEC,EAAQ,WACZF,EAAgBpB,GAAakB,WAEzBK,EAAM,CAAED,SAId,SAAStE,EAAcH,GACrB,OH/FG,SAAsB2E,EAAyB3H,GAKpD,IAHA,IAAIV,EAAQqI,EAASrI,MACjBC,EAASoI,EAASpI,OAChBqI,EAAgB3I,EAAKW,KAAKN,EAAOC,EAAQ,GACtCqB,EAAI,EAAGA,EAAItB,EAAOsB,IACzB,IAAK,IAAIa,EAAI,EAAGA,EAAIlC,EAAQkC,IACtBkG,EAASpH,IAAIK,EAAGa,IAClB1B,EAAQ6H,EAAehH,EAAGa,GAIhC,IAAK,IAAIb,EAAI,EAAGA,EAAItB,EAAOsB,IACzB,IAAK,IAAIa,EAAI,EAAGA,EAAIlC,EAAQkC,IAAK,CAC/B,IAAIoG,EAAY7H,EAAMO,IAAIK,EAAGa,GAC7B,GAAkB,OAAdoG,GACGD,EAAcrH,IAAIK,EAAGa,KAAOoG,EACjC,OAAO,EAIb,OAAO,EG0EDC,CAAa9E,EAAWhD,IAC1BuH,EAAgBpB,GAAa4B,OACtB,IAEPP,GAAa,IACN,GARXQ,8BAAoBb,GAAK,kBAAMO,KAY/B,IAAMO,EAAaX,IAAiBnB,GAAa+B,YAEjD,OACE,8BACE,eAAC,IAAD,CAAe/F,MAAOA,GAAtB,UACE,cAAC8D,GAAD,CAAetB,OAAQ2C,IAAiBnB,GAAa4B,KAAMnE,QA5BjD,WACdwD,EAAS5G,EAAc0G,EAAMiB,WAC7BX,GAAa,GACbD,EAAgBpB,GAAa+B,gBA0BvBD,GAAc,cAAC3B,GAAD,CAAc1C,QAAS6D,IACvC,cAAC,aAAD,CACEW,MAAOH,EACP7D,OAAQ,CAAEiE,KAAM,GAAK/D,QAAS,KAC9BiB,KAAQ,CAAE+C,QAAS,GACnBC,MAAS,CAAED,QAAS,GACpBE,MAAS,CAAEF,QAAS,GALtB,SAMI,SAACG,EAAQC,GAAT,OACAA,GACA,mCACA,cAACnC,GAAD,UACE,cAACH,GAAD,CAAe7B,MAAOkE,EAAtB,SACE,cAAC5B,GAAD,CACE7G,MAAOA,EACPoD,YAAaA,EACbD,cAAeA,qB,wEC5FlBwF,OAzDf,WAAgB,IAAD,EACuBtF,mBAAS,GADhC,mBACNuF,EADM,KACMC,EADN,KAEP1B,EAAM2B,iBAA6B,MASzC,OACE,cAACC,GAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACC,GAAA,EAAD,CAAMC,QAAQ,WAAd,SACA,cAACC,GAAA,EAAD,UACA,eAAC,KAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACE,cAACC,GAAA,EAAD,CAAYN,QAAQ,KAAKO,UAAU,KAAKC,cAAY,EAApD,0BAGA,eAACF,GAAA,EAAD,CAAYN,QAAQ,QAApB,kCACuB,cAACS,GAAA,EAAD,CAAMC,KAAK,yBAAX,uBADvB,sJAOF,eAAC,KAAD,CAAMN,MAAI,EAACC,GAAI,EAAf,UACE,cAACC,GAAA,EAAD,CAAYK,GAAG,kBAAkBH,cAAY,EAA7C,uDAGA,cAACI,GAAA,EAAD,CACEC,kBAAkB,OAClB3J,IAAK,EACLD,IAAK,GACL6J,KAAM,EACNC,SAjCY,SAAC/D,EAAQgE,GAC7BrB,EAAcqB,IAiCNvK,MAAOiJ,EACPuB,MAAO,CAAC,CAACxK,MAAO,EAAGyK,MAAO,KAAK,CAACzK,MAAO,GAAIyK,MAAO,SAEpD,cAACC,GAAA,EAAD,CACEC,MAAM,UACNpB,QAAQ,WACRtF,QArCM,WACF,OAARuD,GAA+B,MAAfA,EAAIoD,SACtBpD,EAAIoD,QAAQ9C,SAgCR,8BAOF,cAAC,KAAD,CAAM6B,MAAI,EAACC,GAAI,EAAf,SACE,cAACvC,GAAD,CAASmB,SAAUS,EAAYzB,IAAKA,gBC9C/BqD,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.88f2fa13.chunk.js","sourcesContent":["export default class Grid<T> {\n  list: T[];\n  width: number;\n  height: number;\n  constructor(w: number, h: number, rawData: T[]) {\n    this.list = rawData;\n    this.width = w;\n    this.height = h;\n  }\n  static fill<T>(w: number, h: number, fill: T) {\n    return new Grid(w, h, new Array(w * h).fill(fill));\n  }\n  static from<T>(g: Grid<T>) {\n    return new Grid(g.width, g.height, g.list);\n  }\n  get(a: number, b: number): T {\n    return this.list[a + b * this.width];\n  }\n  set(a: number, b: number, value: T) {\n    this.list[a + b * this.width] = value;\n  }\n  toArray(): T[] {\n    return this.list;\n  }\n}\n\n","import Grid from './grid';\n\n// Based on lodash\nfunction shuffle<T>(array: T[]): T[] {\n  const length = array.length;\n  let index = -1;\n  const lastIndex = length - 1;\n  const result = [...array];\n  while (++index < length) {\n    const rand = index + Math.floor(Math.random() * (lastIndex - index + 1));\n    const value = result[rand];\n    result[rand] = result[index];\n    result[index] = value;\n  }\n  return result;\n}\n\nfunction randInteger(a: number, b: number) {\n  return Math.floor((b - a) * Math.random() + a);\n}\n\n/**\n * Add a mine, updating the board of counts.\n */\nfunction addMine(board: Grid<number>, a: number, b: number) {\n  for (let x = Math.max(a-1, 0); x <= Math.min(a+1, board.width - 1); x++) {\n    for (let y = Math.max(b-1, 0); y <= Math.min(b+1, board.height - 1); y++) {\n      board.set(x, y, board.get(x, y) + 1);\n    }\n  }\n}\n\n/**\n * Is the selected mines (selected by the user) a valid selection\n * for the given board of counts?\n */\nexport function verifyAnswer(selected: Grid<boolean>, board: Grid<number>) {\n  // TODO assert same size???\n  let width = selected.width;\n  let height = selected.height;\n  const proposedBoard = Grid.fill(width, height, 0);\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      if (selected.get(i, j)) {\n        addMine(proposedBoard, i, j);\n      }\n    }\n  }\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      let realCount = board.get(i, j);\n      if (realCount !== null \n          && proposedBoard.get(i, j) !== realCount) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport function generateBoard(size: number): Grid<number> {\n  const totalSquares = size * size;\n  let nums = new Array(totalSquares);\n  for (let i = 0; i < totalSquares; i++) {\n    nums[i] = i;\n  }\n  nums = shuffle(nums);\n  let numMines = randInteger(totalSquares / 4, totalSquares / 3 + 1);\n\n  const board = Grid.fill(size, size, 0);\n  for (let i = 0; i < numMines; i++) {\n    let x = nums[i];\n    let a = x % size;\n    let b = Math.floor(x / size);\n    addMine(board, a, b);\n  }\n  // how many square should be blank? \n  // (excluding mine squares, which are blank anyway)\n  let numBlankSquares = totalSquares / 4;\n  for (let i = 0; i < numMines + numBlankSquares; i++) {\n    let x = nums[i];\n    let a = x % size;\n    let b = Math.floor(x / size);\n    board.set(a, b, null);\n  }\n  // Some squares will have '0'. Blank out those squares\n  // (because '0' does not typically appear in Minesweeper.)\n  // In real Minesweeper, EVERY square with '0' will be indicated\n  // but we will not indicate them here.\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      let count = board.get(i, j);\n      if (count === 0) {\n        board.set(i, j, null);\n      }\n    }\n  }\n\n  return board;\n}\n","import styled from 'styled-components';\nimport Grid from './grid';\nimport { useState, useEffect } from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nconst InterfaceWrapper = styled.div`\nbackground-color: #ffffff;\npadding: 8px;\n`\n\nconst cols = ({ numColumns }: { numColumns: number }) => numColumns;\n\nconst GridWrapper = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(${cols}, 1fr);\ngrid-auto-rows: 1fr;\naspect-ratio: 1;\ngap: 4px;\nmargin-bottom: 8px;\n`\n\n\ninterface GridCellTextProps {\n  colorIndex: number;\n  theme: any;\n  fontSize: number;\n}\n\nconst getColor = ({ colorIndex, theme }: GridCellTextProps) => \n  colorIndex > 3 ? theme.gameColors[3] : theme.gameColors[colorIndex]\n\nconst GridCellText = styled.span`\nfont-size: ${({ fontSize }: GridCellTextProps) => fontSize}px;\nfont-weight: bold;\ntext-align: center;\ncolor: ${getColor};\n`\n\ninterface GridCellProps {\n  isSelected: boolean;\n  theme: any;\n}\n\nconst GridCell = styled.div`\nbackground-color: #dddddd;\ntransition: border-color 0.1s;\n\ndisplay: flex;\njustify-content: center;\nalign-content: center;\nflex-direction: column;\n${({ isSelected, theme }: GridCellProps) => \n  isSelected ? \n    \"border: 4px solid \" + theme.primaryColor :\n    \"border: 4px solid rgba(0,0,0,0)\"}\n;\n\n:hover {\n  background-color: #cccccc;\n}\n`\n\nconst SubmitButton = styled.button`\nbackground-color: ${({theme}) => theme.primaryColor};\nborder: none;\nborder-radius: 4px;\nfont-size: 16px;\nfont-family: ${({theme}) => theme.fontFamily};\nfont-weight: 500;\npadding: 12px 16px;\ncolor: #ffffff;\n:hover {\n    filter: brightness(90%);\n}\n`;\n\nconst ErrorText = styled.span`\nfont-size: 16px;\ncolor: ${({theme}) => theme.errorColor};\n`\n\nconst RowFlex = styled.div`\ndisplay: flex;\nflex-direction: row;\nalign-items: center;\n`\n\nconst MarginRight = styled.div`\nmargin-right: 16px;\n`\n\ninterface Props {\n  selection: Grid<boolean>;\n  content: Grid<number>;\n  onSquareClick: (x: number, y: number) => void;\n  onVerifyClick: () => boolean;\n  isIncorrect: boolean;\n}\n\nexport default function GameInterface(\n  { selection, content, onSquareClick, onVerifyClick, isIncorrect } : Props\n) {\n  const [shakeButton, setShakeButton] = useState(false);\n  const width = selection.width;\n  const height = selection.height;\n  const cells = new Array(width * height);\n  console.log(width);\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      const cellNumber = content.get(i, j);\n      cells[i + j * width] = \n        <GridCell key={`${i}:${j}`} \n          onClick={() => onSquareClick(i, j)}\n          isSelected={selection.get(i, j)}>\n          { cellNumber !== null &&\n            <GridCellText \n              fontSize={Math.floor(150 / width)}\n              colorIndex={cellNumber}>\n              { content.get(i, j) }\n            </GridCellText>\n          }\n        </GridCell>\n      ;\n    }\n  }\n\n  useEffect(() => {\n    if (shakeButton) {\n      const timeout = window.setTimeout(() => setShakeButton(false), 50);\n      return () => window.clearTimeout(timeout);\n    }\n  }, [shakeButton]);\n\n  const x = useSpring({\n    transform: `translate3d(${shakeButton ? 10 : 0}px, 0px, 0px)`,\n    config: {\n      friction: 10,\n      tension: 700\n    }\n  });\n\n  return (\n  <InterfaceWrapper>\n    <GridWrapper numColumns={width}>\n    { cells }\n    </GridWrapper>\n    <RowFlex>\n      <MarginRight>\n        <animated.div style={x}>\n          <SubmitButton onClick={(_) => {\n            let correct = onVerifyClick();\n            setShakeButton(!correct);\n          }} >\n            VERIFY\n          </SubmitButton>\n        </animated.div>\n      </MarginRight>\n      { isIncorrect && <ErrorText>Incorrect answer</ErrorText> }\n    </RowFlex>\n  </InterfaceWrapper>\n  );\n}\n","import styled from 'styled-components';\nimport { animated, useSpring } from 'react-spring';\n\nconst ButtonContainer = styled.div`\nborder: 1px solid #cccccc;\nbackground-color: #fafafa;\nborder-radius: 4px;\npadding: 16px;\nheight: 32px;\nwidth: 300px;\ndisplay: flex;\nflex-direction: row;\nalign-items: center;\n${({ isDone }: { isDone: boolean }) => \n  !isDone && `\n  cursor: pointer;\n  :hover {\n    background-color: #eeeeee;\n  }` \n}\n`\nconst Text = styled.span`\nfont-family: ${({theme}) => theme.fontFamily};\ncolor: #444444;\n`\n\nconst MiddleSection = styled.div`\nflex: 1;\n`\n\nconst LeftSection = styled.div`\npadding-right: 16px;\nwidth: 32px;\nheight: 32px;\n`\n\nconst Checkbox = styled.div`\nborder: 2px solid #cccccc;\nbackground-color: #ffffff;\nborder-radius: 2px;\nwidth: 28px;\nheight: 28px;\n`\n\ninterface Props {\n  onClick: () => void;\n  isDone: boolean;\n}\n\nfunction Image() {\n  const Logo = styled.img`\n    width: 40px;\n    height: 40px;\n  `\n  return (\n    <Logo src=\"./UncoveredMine.png\" alt=\"Minesweeper Logo\" />\n  );\n}\n\nfunction Tick() {\n  let anim = useSpring({\n    from: { strokeDashoffset: 15 },\n    to: { strokeDashoffset: 0 },\n  });\n  return (\n    <animated.svg\n       width=\"32\"\n       height=\"32\"\n       viewBox=\"0 0 10.583333 10.583334\"\n    >\n      <animated.path\n        style={anim}\n        fill=\"rgb(0,0,0,0)\"\n        stroke=\"#2ca02c\" // move colour to theme??\n        strokeWidth={1}\n        strokeDasharray={15}\n        d=\"M 0.52916667,5.8208333 3.96875,9.2604166 9.7895833,0.79375\"\n      ></animated.path>\n    </animated.svg>\n  );\n}\n\nexport default function CaptchaButton({ isDone, onClick }: Props) {\n  return (\n    <ButtonContainer isDone={isDone} onClick={(e) => !isDone && onClick()}>\n      <LeftSection>\n      { isDone ?\n        <Tick/>\n        :\n        <Checkbox />\n      }\n      </LeftSection>\n      <MiddleSection>\n        <Text>\n          I am a robot\n        </Text>\n      </MiddleSection>\n      <Image />\n    </ButtonContainer>\n  )\n}\n","import styled, { ThemeProvider } from 'styled-components';\nimport { useState, useImperativeHandle, forwardRef, useEffect } from 'react';\nimport { animated, Transition } from 'react-spring';\nimport { verifyAnswer, generateBoard }  from './generator';\nimport Grid from './grid';\nimport GameInterface from './GameInterface';\nimport CaptchaButton from './CaptchaButton';\n\nconst theme = {\n  primaryColor: \"#4A91DA\",\n  errorColor: \"#D6614D\",\n  fontFamily: \"\\\"Roboto\\\", arial, san-serif\",\n  gameColors: [\"#444444\", \"#4A91DA\", \"#579C6E\", \"#D6614D\"]\n}\n\nconst DialogWrapper = styled(animated.div)`\nposition: relative;\ntop: -100px;\nleft: 200px;\ndisplay: inline-block;\nz-index: 999;\n`\n\nconst DismissFrame = styled.div`\nposition: absolute;\ntop: 0;\nleft: 0;\nbottom: 0;\nright: 0;\nwidth: 100%;\n`\n\nconst AbsDiv = styled.div`\nposition: absolute;\nwidth: 0;\nheight: 0;\n`\n\nconst FrameWrapper = styled.div`\nwidth: 300px;\nfont-family: ${({theme}) => theme.fontFamily};\nbox-shadow: 0px 12px 16px rgba(0,0,0,0.2);\n`\n\nconst HeaderWrapper = styled.div`\nbackground-color: ${({theme}) => theme.primaryColor};\npadding: 16px;\n`\n\nconst LargeHeaderText = styled.div`\ncolor: #ffffff;\nfont-size: 24px;\nfont-weight: bold;\n`\n\nconst HeaderText = styled.div`\ncolor: #ffffff;\n`\n\nconst Header = () => (\n  <HeaderWrapper>\n    <HeaderText>Select all squares with</HeaderText>\n    <LargeHeaderText>Mines</LargeHeaderText>\n  </HeaderWrapper>\n);\n\ninterface MainScreenProps {\n  board: Grid<number>;\n  onVerifyClick: (grid: Grid<boolean>) => boolean;\n  isIncorrect: boolean;\n}\n\nfunction MainScreen({ isIncorrect, board, onVerifyClick }: MainScreenProps) {\n  const [selection, setSelection] = useState(\n    Grid.fill(board.width, board.height, false)\n  );\n  useEffect(() => {\n    setSelection(Grid.fill(board.width, board.height, false))\n  }, [board]);\n  const onSquareClick = (x: number, y: number) => {\n    const newArray = Grid.from(selection);\n    newArray.set(x, y, !newArray.get(x, y));\n    setSelection(newArray);\n  };\n  return (\n    <FrameWrapper>\n      <Header />\n      <GameInterface\n        selection={selection}\n        content={board}\n        onSquareClick={onSquareClick}\n        isIncorrect={isIncorrect}\n        onVerifyClick={() => onVerifyClick(selection)}\n        />\n    </FrameWrapper>\n  );\n}\n\nenum CaptchaState {\n  NOT_DONE,\n  IN_PROGRESS,\n  DONE\n}\n\ninterface CaptchaProps {\n  gridSize: number;\n}\n\nexport interface CaptchaHandle {\n  reset: () => void;\n}\n\nexport const Captcha = forwardRef<CaptchaHandle, CaptchaProps>((props, ref) => {\n  const [board, setBoard] = useState<Grid<number> | null>(null);\n  const [captchaState, setCaptchaState] = useState(CaptchaState.NOT_DONE);\n  const [isIncorrect, setIncorrect] = useState(false);\n\n  const onClick = () => {\n    setBoard(generateBoard(props.gridSize));\n    setIncorrect(false); // reset\n    setCaptchaState(CaptchaState.IN_PROGRESS);\n  }\n\n  const reset = () => {\n    setCaptchaState(CaptchaState.NOT_DONE);\n  }\n  const obj = { reset };\n  // expose callback\n  useImperativeHandle(ref, () => obj);\n\n  function onVerifyClick(selection: Grid<boolean>) {\n    if (verifyAnswer(selection, board!)) {\n      setCaptchaState(CaptchaState.DONE);\n      return true;\n    } else {\n      setIncorrect(true);\n      return false;\n    }\n  }\n\n  const showDialog = captchaState === CaptchaState.IN_PROGRESS;\n\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n        <CaptchaButton isDone={captchaState === CaptchaState.DONE} onClick={onClick} />\n        { showDialog && <DismissFrame onClick={reset}/> }\n        <Transition\n          items={showDialog}\n          config={{ mass: 0.1, tension: 200 }}\n          from = {{ opacity: 0 }}\n          enter = {{ opacity: 1 }}\n          leave = {{ opacity: 0 }}>\n          { (styles, show) =>\n            show &&\n            <>\n            <AbsDiv>\n              <DialogWrapper style={styles}>\n                <MainScreen \n                  board={board!}\n                  isIncorrect={isIncorrect}\n                  onVerifyClick={onVerifyClick}/>\n              </DialogWrapper>\n            </AbsDiv>\n            </>\n          }\n        </Transition>\n      </ThemeProvider>\n    </div>\n  );\n})\n\n","import { useRef, useState } from 'react';\nimport { Captcha, CaptchaHandle } from './Captcha';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Slider from '@material-ui/core/Slider';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport Link from \"@material-ui/core/Link\";\n\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(4);\n  const ref = useRef<CaptchaHandle | null>(null);\n  const onInputChange = (e: any, newValue: number | number[]) => {\n    setInputValue(newValue as number);\n  }\n  const onClick = () => {\n    if (ref !== null && ref.current != null) {\n      ref.current.reset();\n    }\n  }\n  return (\n    <Container maxWidth=\"md\">\n      <Card variant=\"outlined\">\n      <CardContent>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n            Mine Captcha\n          </Typography>\n          <Typography variant=\"body1\">\n            This was inspired by <Link href=\"https://xkcd.com/2496/\">xkcd 2496</Link>.\n            Click on the Captcha button to solve a \"Minesweeper\" puzzle\n            (which is not really a Minesweeper problem, but more like a \n            \"tentaizu\" puzzle.)\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography id=\"discrete-slider\" gutterBottom>\n            Size of grid (number of columns and rows)\n          </Typography>\n          <Slider \n            valueLabelDisplay=\"auto\"\n            min={4}\n            max={10}\n            step={1}\n            onChange={onInputChange}\n            value={inputValue}\n            marks={[{value: 4, label: \"4\"},{value: 10, label: \"10\"}]}\n            />\n          <Button \n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={onClick}>\n            Reset CAPTCHA\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Captcha gridSize={inputValue} ref={ref}/>\n        </Grid>\n      </Grid>\n      </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}